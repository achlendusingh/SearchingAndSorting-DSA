class Solution {
public:
    
    int findPivot(vector <int> v)
    {
        int low=0;
        int high=v.size()-1;
        int mid,pivot;
        while(low<=high)
     {
        mid=(low+high)/2;
        if(low==high)
        {
         return low;
        }
        if(mid<=high && v[mid]>v[mid+1])
        {
          return mid;
        }
        if ((mid-1)>=low && v[mid]<v[mid-1])
        {
          return mid-1;
        }
        if (v[mid]<v[low])
        {
          high=mid-1;
        }
        else 
        {
          low=mid+1;
        }
    }
    return -1;
    }
    
    int binarySearch(vector <int>arr,int low, int high,int target)
    {
        int mid;
        while(low<=high)
        {
            mid=(low+high)/2;
            if(arr[mid]==target)
            {
                return mid;
            }
            else if(arr[mid]<target)
            {
                low=mid+1;
            }
            else
            {
                high=mid-1;
            }
        }
        return -1;
    }

    int search(vector<int>& nums, int target) {
        int pivot=findPivot(nums);
        int ans=0;
        if(target>=nums[0] && target<=nums[pivot])
        {
            ans=binarySearch(nums,0,pivot,target);
        }
        else
        {
            ans=binarySearch(nums,pivot+1,nums.size()-1,target);
        }
        return ans;
    }
};
